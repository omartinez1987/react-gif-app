{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GridGifItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","categories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","type","onChange","target","value","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GridGifItem","className","src","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAsCeA,EAjCY,SAAC,GAAqC,IAAlCC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,WAC1C,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,uBAAMC,SAVW,SAAEC,GACnBA,EAAEC,iBACFC,QAAQC,IAAI,kBACRN,EAAWO,OAAOC,OAAS,IAC3BX,EAAc,CAAGG,GAAJ,mBAAmBF,KAChCG,EAAc,MAKlB,UACI,8CAEA,uBACIQ,KAAK,OACLC,SAnBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOC,QAmBfA,MAAQZ,Q,+BCzBXa,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DACH,mCAEVC,EAHa,yFAG4EC,UAAWH,GAHvF,sBAKII,MAAMF,GALV,cAKbG,EALa,gBAOIA,EAASC,OAPb,uBAOXC,EAPW,EAOXA,KAEFC,EAAOD,EAAKE,KACd,SAAEC,GAAU,IAAD,EACP,MAAQ,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAd3B,kBAmBZM,GAnBY,4CAAH,sDCDPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,IACX,4BAAKU,QCHJM,EAAU,SAAC,GAAoB,IAAjBlB,EAAgB,EAAhBA,SAIvB,ECHwB,SAAEA,GAE1B,MAA0Bf,mBAAS,CAC/BsB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAW,WACPvB,EAASC,GACRuB,MACG,SAAEC,GACEH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAGtB,CAAEnB,IAIEoB,EDjB2BK,CAAczB,GAAlCa,EAAd,EAAQN,KAAcY,EAAtB,EAAsBA,QAOtB,OAJA5B,QAAQC,IAAIqB,GAKR,sBAAKG,UAAU,YAAf,UACI,mCAAOhB,EAAP,OACA,uBACEmB,GAAW,mBAAGH,UAAU,mCAAb,0BAEb,8BAEQH,EAAOJ,KAAK,SAACC,GACT,OACI,cAAC,EAAD,eAESA,GADCA,EAAIC,aEQ3Be,EA7BM,WAEjB,MAAoCzC,mBAAS,CAAC,kBAA9C,mBAAOD,EAAP,KAAmBD,EAAnB,KAOA,OACI,eAAC,WAAD,WACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAgBA,EAAgBC,WAAaA,IAC1D,uBAGIA,EAAWyB,KACP,SAAET,GACE,OACI,cAAC,EAAD,CAASA,SAAWA,GAAiBA,U,MCpBjE2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d5b47761.chunk.js","sourcesContent":["\nimport React, { Fragment, useState } from 'react'\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ( { setCategories, categories } ) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n        console.log('Submit hecho!!');\n        if( inputValue.trim().length > 2 ){\n            setCategories( [ inputValue, ...categories ] );\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <h2>Add category</h2>\n\n            <input \n                type=\"text\"\n                onChange = { handleInputChange }\n                value={ inputValue }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","\n\n\nexport const getGifs = async ( category) => {\n    const api_key = 'NzrK4kN2xXSCCRnexox1rZ1lZrAmtkzb';\n\n    const url = `http://api.giphy.com/v1/gifs/search?api_key=NzrK4kN2xXSCCRnexox1rZ1lZrAmtkzb&q=${ encodeURI( category ) }&limit=10`;\n\n    const response = await fetch(url);\n\n    const { data } = await response.json();\n    \n    const gifs = data.map(\n        ( img ) => {\n            return ({\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            })\n        }\n    );\n\n    return gifs;\n}","import React from 'react'\n\nexport const GridGifItem = ({ id, title, url }) => {\n    \n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={ url }/>\n            <p>{ title }</p>\n        </div>\n    )\n}\nexport default GridGifItem;","import React, { Fragment, useEffect, useState } from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GridGifItem } from './GridGifItem';\n\nexport const GifGrid = ( { category } ) => {\n\n    // Aqui usamos la desestructuracion y al mismo tiempo renombramos data como images \n    // para utilizar images en lugar de data\n    const { data: images, loading } = useFetchGifs( category );\n\n    \n    console.log(images);\n    \n    \n\n    return (\n        <div className='card-grid'>\n            <h3> { category } </h3>\n            <br />\n            { loading && <p className='animate__animated animate__flash'> Loading... </p>}\n\n            <div>\n                {\n                    images.map( (img) => {\n                        return(\n                            <GridGifItem \n                                key={ img.id }\n                                { ...img }/>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default GifGrid;\n","\nimport { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n// ESTO ES UN CUSTOM HOOK\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs( category )\n        .then(\n            ( imgs ) => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            });\n    }, [ category ]);\n\n    \n\n    return state;\n\n\n}\n","import React, { Fragment, useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nconst GifExpertApp = () =>{\n\n    const [categories, setCategories] = useState(['Dragon Ball Z']);\n\n    // const handleAdd = () => {\n    //     //setCategories( [ ...categories, 'Otro item' ]);\n    //     setCategories( ( categs ) => { return [ ...categories, 'Otro item' ] });\n    // }\n\n    return(\n        <Fragment>\n            <h2>GifExpertApp</h2>\n            <hr/>\n            <AddCategory setCategories={ setCategories } categories={ categories }/>\n            <hr/>\n\n            {\n                categories.map(\n                    ( category ) => {\n                        return (\n                            <GifGrid category={ category } key={ category }/>\n                        )\n                    }   \n                )\n            }\n        </Fragment>\n    )\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}